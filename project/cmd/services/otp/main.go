// Code generated by git.redmadrobot.com/backend-go/meroving. DO NOT EDIT.
package main

import (
	"context"
	"log"
	"time"
	o "your-company.com/project/pkg/otp"

	"your-company.com/project/pkg/redis"
	_ "github.com/google/uuid"

	"your-company.com/project/pkg/logs"

	"your-company.com/project/pkg/grpcx"

	"your-company.com/project/config/services/otp"
	"your-company.com/project/services/otp/server"

	"your-company.com/project/services/otp/usecase"
)

func main() {
	time.Local = time.UTC
	cfg := otp.Load()

	log := logs.Logger(cfg.Logger)
	defer log.Fatal().Msgf("application stopped")

	ctx, cancel := context.WithCancel(log.WithContext(context.TODO()))

	if err := run(ctx, cancel, cfg); err != nil {
		log.Info().Err(err).Msg("unable to start application")
	}
}

func run(ctx context.Context, cancel context.CancelFunc, cfg *otp.Config) error {
	// Initialize Redis cache
	redis, err := redis.NewClient(ctx, cfg.Redis)
	if err != nil {
		log.Fatalf("Failed to create Redis client: %v", err)
	}
	defer redis.Close(ctx)

	otpProviderCfg := o.Config{
		Env:             cfg.App.Environment,
		OtpRequestTTL:   cfg.App.OtpRequestTTL,
		CodeTTL:         cfg.App.CodeTTL,
		MaxAttempts:     cfg.App.MaxAttempts,
		MaxCodeChecks:   cfg.App.MaxCodeChecks,
		NewAttemptDelay: cfg.App.NewAttemptDelay,
	}
	otpProvider := o.NewProviderOtp(otpProviderCfg, redis)

	providers := otp.Providers{
		ProviderOtp: otpProvider,
		Redis:       redis,
	}
	// Initialize Use cases
	useCases := usecase.New(cfg, &providers)

	// Initialize gRPC server
	service := server.NewServerOptions(useCases, cfg)
	grpcServer, err := service.NewServer(cfg.GRPC)
	if err != nil {
		log.Fatalf("Failed to create gRPC Server: %v", err)
	}

	return grpcx.StartServer(ctx, cfg.GRPC, grpcServer)
}
